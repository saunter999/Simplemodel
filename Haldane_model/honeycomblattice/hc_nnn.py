#!/usr/bin/env python
"""
Generate the band structure of Haldane model with magnetic flux on square lattice.
"""
from scipy import *
from numpy import linalg as LA
from pylab import *
#import pylab as plt
from mpl_toolkits.mplot3d import Axes3D

def Eig_solver(qx,qy):
      Hk=zeros((2,2),dtype=complex)
      kvec=array([qx,qy])
      #----assignment of the diagonal terms of Hamiltonian kernal h(k)---#
      #----only existing when next-nearest hopping isn't zero-------#
      for vv in vvct:
	Hk[0,0]+=cos(phi-dot(vv,kvec))
	Hk[1,1]+=cos(phi+dot(vv,kvec))
      Hk[0,0]=-2.0*tprime*Hk[0,0]
      Hk[1,1]=-2.0*tprime*Hk[1,1]
      #----assignment of the off-diagonal terms of Hamiltonian kernal h(k)---#
      for ev in evct:
	Hk[0,1]+=exp(1j*dot(ev,kvec))
      Hk[0,1]=-t*Hk[0,1]
      Hk[1,0]=conjugate(Hk[0,1])
      Eig,v=LA.eig(Hk)
      #----sorting the eigvaule and its corresponding eigvector in the order of increasing magnitude of eigvaule.---#
      idx=Eig.argsort()
      Eig=Eig[idx]
      v=v[:,idx]
      return (Eig,v)



if __name__=='__main__':
    """
    Parameters specification:
    Nk->Number of k points in one direction.
    t -> nearest hopping.
    tprime ->next-nearest hopping 
    phi -> phase factor affliated with tprime due to the magnetic flux
    phi=pi/4.0  
    evct ->three vectors connecting nearest neighbours from one site
    vvct ->three vectors connecting next nearest neighbours from one site
    """
    Nk=100
    kp=linspace(-pi,pi,Nk)
    t=1.0   
    phi=pi/2.0  
    tprime=0.1
    e1=array([0,1])
    e2=array([-sqrt(3)/2.0,-0.5])
    e3=array([sqrt(3)/2.0,-0.5])
    evct=array([e1,e2,e3])
    v1=array([sqrt(3.0),0.0])
    v2=array([-sqrt(3)/2.0,1.5])
    v3=array([-sqrt(3)/2.0,-1.5])
    vvct=array([v1,v2,v3])
    
    #defining the kernal of the Haldane model on square lattice
    #To plot the 3D surface plot by python,the input X,Y,Z should all be 2D array.
    #Hence we store the two eigenvalues by Nk*Nk matrices and qx,qy 2D array are generated by meshgrid.
    Eigband=zeros((2,Nk,Nk))
    qx=kp;qy=kp;
   # print qx,qx.shape
    qx,qy=meshgrid(qx,qy)
   # print qx,qx.shape
   #1):solve for the eigenvaule across the 2d conventional BZ
    for ind1,q1 in enumerate(kp):
	for ind2,q2 in enumerate(kp):
		(Eig,v)=Eig_solver(q1,q2)
	#	print>>f,q1,q2,Eig[0].real,Eig[1].real
		for i in range(len(Eig)):
                    Eigband[i,ind1,ind2]=Eig[i].real
    ax = plt.axes(projection='3d')
    figure(1)
    for i in range(len(Eig)):
    	ax.plot_surface(qx, qy, Eigband[i], rstride=1,cstride=1,linewidth=0,cmap=cm.coolwarm, antialiased=False)
    savefig("bands_BZ.png")
	
    #2):Evaluation of the berry phase. ?????????
    #Defining the unit vector of the 1stBZ
    bk1=array([pi,pi/sqrt(3)])
    bk2=array([0.,2.*pi/sqrt(3)])
    uk_ocp=zeros((2,Nk),dtype=complex)
    for ind,lamda in enumerate(linspace(0.,1.,Nk)):
	q1=lamda*bk1[0] 
	q2=lamda*bk1[1] 
	(Eig,v)=Eig_solver(q1,q2)
	uk_ocp[:,ind]=v[:,0]	
    umul1=1.0
    bryph_ocp=[]
    for i in range(1,Nk):
	uovlap1=np.vdot(uk_ocp[:,i-1],uk_ocp[:,i])
	umul1=umul1*uovlap1	
    bryph_ocp.append((np.log(umul1)).imag)   
    bryph_ocp=array(bryph_ocp)
    print bryph_ocp/pi 

    #3):plot bandstructure along high symmetry k lines.
    #In the case of honeycomb lattice,the kpath generated below is the high symmetry lines 
    #along the conventional BZ,not the true BZ of honeycomb lattice,so we don't see the gappless
    #points
    kpath=[];Eig1kp=[];Eig2kp=[];
    for q1 in kp:
	kpath.append([q1,-pi])
    for q1 in kp:
	kpath.append([pi,q1])
    for q1 in reversed(kp):
	kpath.append([q1,q1])
    for ks in kpath:
	(Eig,v)=Eig_solver(ks[0],ks[1])
	idx=Eig.argsort()
	Eig=Eig[idx]
	v=v[:,idx]
	Eig1kp.append(Eig[0].real)
	Eig2kp.append(Eig[1].real)
    index=range(len(kpath))
    figure(2)
    plot(index,Eig1kp)
    plot(index,Eig2kp)
    savefig("bands_highsymline.png")
    grid()
    show()
