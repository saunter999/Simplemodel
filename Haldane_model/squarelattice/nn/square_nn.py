#!/usr/bin/env python
"""
Generate the band structure of Haldane model on square lattice.
"""
from scipy import *
from numpy import linalg as LA
from pylab import *
#import pylab as plt
from mpl_toolkits.mplot3d import Axes3D

def Eig_solver(qx,qy):
      Hk[0,0]=0.0
      Hk[0,1]=-2.0*t*( exp(-1j*phi)*cos((qx+qy)/2.0 )+exp(1j*phi)*cos( (qx-qy)/2.0 ) )
      Hk[1,0]=conjugate(Hk[0,1])
      Hk[1,1]=0.0
      Eig,v=LA.eig(Hk)
      return (Eig,v)



if __name__=='__main__':
    #Generating k points
    Nk=80
    kp=linspace(-pi,pi,Nk)
    t=1.0   
    phi=pi/6.  #phase factor in the hopping amplitude. 
    #defining the kernal of the Haldane model on square lattice
    Hk=zeros((2,2),dtype=complex)
    f=open("bandstruc_square.out","w")
    print>>f,"#phi=",phi/pi,"*pi"
    #To plot the 3D surface plot by python,the input X,Y,Z should all be 2D array.
    #Hence we store the two eigenvalues by Nk*Nk matrices and qx,qy 2D array are generated by meshgrid.
    Eigband=zeros((2,Nk,Nk))
    qx=kp;qy=kp;
   # print qx,qx.shape
    qx,qy=meshgrid(qx,qy)
   # print qx,qx.shape
    for ind1,q1 in enumerate(kp):
	for ind2,q2 in enumerate(kp):
		(Eig,v)=Eig_solver(q1,q2)
	#	print>>f,q1,q2,Eig[0].real,Eig[1].real
		for i in range(len(Eig)):
                    Eigband[i,ind1,ind2]=Eig[i].real
    ax = plt.axes(projection='3d')

    figure(1)
    for i in range(len(Eig)):
    	ax.plot_surface(qx, qy, Eigband[i], rstride=1,cstride=1,linewidth=0,cmap=cm.coolwarm, antialiased=False)
    savefig("bands_BZ.png")
   
    #plot bandstructure along high symmetry k lines.
    kpath=[];Eig1kp=[];Eig2kp=[];
    for q1 in kp:
	kpath.append([q1,-pi])
    for q1 in kp:
	kpath.append([pi,q1])
    for q1 in reversed(kp):
	kpath.append([q1,q1])
    for ks in kpath:
	(Eig,v)=Eig_solver(ks[0],ks[1])
	Eig1kp.append(Eig[0].real)
	Eig2kp.append(Eig[1].real)
    index=range(len(kpath))
    figure(2)
    plot(index,Eig1kp)
    plot(index,Eig2kp)
    savefig("bands_highsymline.png")
    grid()
    show()
